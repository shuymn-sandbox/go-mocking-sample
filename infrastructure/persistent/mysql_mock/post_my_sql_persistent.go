// Code generated by mockery v2.14.0. DO NOT EDIT.

package mysql_mock

import (
	context "context"

	entity "github.com/shuymn-sandbox/go-mocking-sample/domain/entity"
	mock "github.com/stretchr/testify/mock"

	mysql "github.com/shuymn-sandbox/go-mocking-sample/infrastructure/persistent/mysql"
)

// PostMySQLPersistent is an autogenerated mock type for the PostMySQLPersistent type
type PostMySQLPersistent struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, input
func (_m *PostMySQLPersistent) CreatePost(ctx context.Context, input *mysql.CreatePostInput) (*entity.Post, error) {
	ret := _m.Called(ctx, input)

	var r0 *entity.Post
	if rf, ok := ret.Get(0).(func(context.Context, *mysql.CreatePostInput) *entity.Post); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mysql.CreatePostInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostMySQLPersistent interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostMySQLPersistent creates a new instance of PostMySQLPersistent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostMySQLPersistent(t mockConstructorTestingTNewPostMySQLPersistent) *PostMySQLPersistent {
	mock := &PostMySQLPersistent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
