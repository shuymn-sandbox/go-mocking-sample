// Code generated by mockery v2.14.0. DO NOT EDIT.

package s3_mock

import (
	context "context"

	s3 "github.com/shuymn-sandbox/go-mocking-sample/infrastructure/persistent/s3"
	mock "github.com/stretchr/testify/mock"
)

// PostS3Persistent is an autogenerated mock type for the PostS3Persistent type
type PostS3Persistent struct {
	mock.Mock
}

// UploadContent provides a mock function with given fields: ctx, input
func (_m *PostS3Persistent) UploadContent(ctx context.Context, input *s3.UploadContentInput) (*s3.UploadContentOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 *s3.UploadContentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *s3.UploadContentInput) *s3.UploadContentOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.UploadContentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *s3.UploadContentInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostS3Persistent interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostS3Persistent creates a new instance of PostS3Persistent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostS3Persistent(t mockConstructorTestingTNewPostS3Persistent) *PostS3Persistent {
	mock := &PostS3Persistent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
